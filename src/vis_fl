check_to_die.c:	if (vm->checks_num == MAX_CHECKS)
check_to_die.c:				  vm->cycles_to_die);
check_to_die.c:		ft_printf("(%d) reached MAX_CHECKS(%d)\n", vm->checks_num, MAX_CHECKS);
check_to_die.c:	else if (vm->lives_num >= NBR_LIVE)
check_to_die.c:				  vm->cycles_to_die);
check_to_die.c:		ft_printf("(%d) exceed NBR_LIVE(%d)\n", vm->lives_num, NBR_LIVE);
check_to_die.c:		if (vm->players[i])
check_to_die.c:			vm->players[i]->prev_lives_num = vm->players[i]->curr_lives_num;
check_to_die.c:			vm->players[i]->curr_lives_num = 0;
check_to_die.c:	vm->lives_num = 0;
check_to_die.c:	prev = vm->cursors;
check_to_die.c:		vm->cursors = prev->next;
check_to_die.c:	if (vm->stat_fl)
check_to_die.c:		vm->cursors_num--;
check_to_die.c:	vm->checks_num++;
check_to_die.c:	cursor = vm->cursors;
check_to_die.c:	if (vm->cycles_to_die <= 0 && vm->stat_fl)
check_to_die.c:				  vm->cycles_to_die, NC);
check_to_die.c:		if (vm->cycles_to_die <= 0 ||
check_to_die.c:		(int)(vm->cur_cycle - cursor->last_live_cycle) >= vm->cycles_to_die)
check_to_die.c:	if (vm->checks_num == MAX_CHECKS || vm->lives_num >= NBR_LIVE)
check_to_die.c:		vm->cycles_to_die -= CYCLE_DELTA;
check_to_die.c:		if (vm->stat_fl)
check_to_die.c:		vm->checks_num = 0;
check_to_die.c:	vm->cycles_after_check = 1;
corewar.c:	vm->players_num = 0;
corewar.c:	vm->last_alive = NULL;
corewar.c:	vm->cursors = NULL;
corewar.c:	vm->cursors_num = 0;
corewar.c:	vm->lives_num = 0;
corewar.c:	vm->cur_cycle = 1;
corewar.c:	vm->cycles_to_die = CYCLE_TO_DIE;
corewar.c:	vm->cycles_after_check = 1;
corewar.c:	vm->checks_num = 0;
corewar.c:	vm->vis_fl = 0;
corewar.c:	vm->stat_fl = 0;
corewar.c:	vm->dump_fl = -1;
corewar.c:	vm->aff_fl = 0;
free_vm.c:		if (vm->players[i])
free_vm.c:			if (vm->players[i]->name)
free_vm.c:				free(vm->players[i]->name);
free_vm.c:			if (vm->players[i]->comment)
free_vm.c:				free(vm->players[i]->comment);
free_vm.c:			if (vm->players[i]->code)
free_vm.c:				free(vm->players[i]->code);
free_vm.c:			free(vm->players[i]);
free_vm.c:	cursor = vm->cursors;
free_vm.c:	vm->cursors = NULL;
ft_drow.c:	if (vm->cursors != NULL)
ft_drow.c:		cursor = vm->cursors;
ft_drow.c:	arena = vm->arena;
ft_drow.c:	mvwprintw(stdscr, 2, col + 2, "cycles_to_die = %i", vm->cycles_to_die);
ft_drow.c:	mvwprintw(stdscr, 3, col + 2, "cur_cycle = %i", vm->cur_cycle);
init_game.c:		cursor->op_code = vm->arena[cursor->pc];
init_game.c:		if (vm->arena[cursor->pc] >= 0x01 && vm->arena[cursor->pc] <= 0x10)
init_game.c:	if (!vm->cursors)
init_game.c:		vm->cursors = cursor;
init_game.c:		cursor->next = vm->cursors;
init_game.c:		vm->cursors = cursor;
init_game.c:	vm->cursors_num++;
init_game.c:		if (vm->players[i])
init_game.c:			add_cursor(vm->players[i], vm->players[i]->pc, vm);
init_game.c:	vm->last_alive = vm->cursors->player;
init_game.c:		if (vm->players[i])
init_game.c:			ft_memcpy(&(vm->arena[pc]), vm->players[i]->code,
init_game.c:				(vm->players[i]->code_size));
init_game.c:			vm->players[i]->pc = pc;
init_game.c:			pc += MEM_SIZE / vm->players_num;
parser.c:		if (vm->players[i])
parser.c:				vm->players[i]->color = CYAN;
parser.c:				vm->players[i]->color = GREEN;
parser.c:				vm->players[i]->color = WHITE;
parser.c:				vm->players[i]->color = MAG;
parser.c:		vm->dump_fl = num;
parser.c:			vm->vis_fl = 1;
parser.c:			vm->aff_fl = 1;
parser.c:			vm->stat_fl = 1;
parser.c:			vm->alive_fl = 1;
parser.c:	if (vm->players_num > MAX_PLAYERS || vm->players_num == 0)
player.c:	while (vm->players[i])
player.c:	vm->players[i] = player;
player.c:		if (!vm->players[id - 1])
player.c:			vm->players[id - 1] = player;
player.c:			tmp = vm->players[id - 1];
player.c:			vm->players[id - 1] = player;
player.c:	vm->players_num++;
printing.c:		player = vm->players[i];
printing.c:	vm->last_alive->id, vm->last_alive->name);
utils1.c:	return (vm->arena[address_norming(pc + step)]);
virtual_machine.c:			reg = vm->arena[cursor->pc + step];
virtual_machine.c:		args_types_code = vm->arena[cursor->pc + 1];
virtual_machine.c:		cursor->op_code = vm->arena[cursor->pc];
virtual_machine.c:	while (vm->cursors_num)
virtual_machine.c://		ft_printf("\n\t\tNumber of cycles %d\t\n\n", vm->cur_cycle);
virtual_machine.c:		if (vm->dump_fl == vm->cur_cycle)
virtual_machine.c:			print_dump(vm->arena, vm);
virtual_machine.c:		cursor = vm->cursors;
virtual_machine.c:		if (vm->vis_fl == 1)
virtual_machine.c:		if ((size_t)vm->cycles_to_die == vm->cycles_after_check
virtual_machine.c:			|| vm->cycles_to_die <= 0)
virtual_machine.c:		vm->cur_cycle++;
virtual_machine.c:		vm->cycles_after_check++;
virtual_machine.c:	if (vm->vis_fl == 1)
virtual_machine.c://	if (vm->stat_fl)
virtual_machine.c://		ft_printf("\n\t\tNumber of cycles %d\t\n\n", vm->cur_cycle);
