./src/check_to_die.c:	if (vm->checks_num == MAX_CHECKS)
./src/check_to_die.c:				  vm->cycles_to_die);
./src/check_to_die.c:		ft_printf("(%d) reached MAX_CHECKS(%d)\n", vm->checks_num, MAX_CHECKS);
./src/check_to_die.c:	else if (vm->lives_num >= NBR_LIVE)
./src/check_to_die.c:				  vm->cycles_to_die);
./src/check_to_die.c:		ft_printf("(%d) exceed NBR_LIVE(%d)\n", vm->lives_num, NBR_LIVE);
./src/check_to_die.c:		if (vm->players[i])
./src/check_to_die.c:			vm->players[i]->prev_lives_num = vm->players[i]->curr_lives_num;
./src/check_to_die.c:			vm->players[i]->curr_lives_num = 0;
./src/check_to_die.c:	vm->lives_num = 0;
./src/check_to_die.c:	prev = vm->cursors;
./src/check_to_die.c:		vm->cursors = prev->next;
./src/check_to_die.c:	if (vm->stat_fl)
./src/check_to_die.c:		vm->cursors_num--;
./src/check_to_die.c:	vm->checks_num++;
./src/check_to_die.c:	cursor = vm->cursors;
./src/check_to_die.c:	if (vm->cycles_to_die <= 0 && vm->stat_fl)
./src/check_to_die.c:				  vm->cycles_to_die, NC);
./src/check_to_die.c:		if (vm->cycles_to_die <= 0 ||
./src/check_to_die.c:		(int)(vm->cur_cycle - to_die->last_live_cycle) >= vm->cycles_to_die)
./src/check_to_die.c:	if (vm->checks_num == MAX_CHECKS || vm->lives_num >= NBR_LIVE)
./src/check_to_die.c:		vm->cycles_to_die -= CYCLE_DELTA;
./src/check_to_die.c:		if (vm->stat_fl)
./src/check_to_die.c:		vm->checks_num = 0;
./src/check_to_die.c:	vm->cycles_after_check = 0;
./src/corewar.c:	vm->players_num = 0;
./src/corewar.c:	vm->last_alive = NULL;
./src/corewar.c:	vm->cursors = NULL;
./src/corewar.c:	vm->cur_id = 0;
./src/corewar.c:	vm->cursors_num = 0;
./src/corewar.c:	vm->lives_num = 0;
./src/corewar.c:	vm->cur_cycle = 1;
./src/corewar.c:	vm->cycles_to_die = CYCLE_TO_DIE;
./src/corewar.c:	vm->cycles_after_check = 1;
./src/corewar.c:	vm->checks_num = 0;
./src/corewar.c:	vm->vis_fl = 0;
./src/corewar.c:	vm->stat_fl = 0;
./src/corewar.c:	vm->dump_fl = -1;
./src/corewar.c:	vm->aff_fl = 0;
./src/free_vm.c:		if (vm->players[i])
./src/free_vm.c:			if (vm->players[i]->name)
./src/free_vm.c:				free(vm->players[i]->name);
./src/free_vm.c:			if (vm->players[i]->comment)
./src/free_vm.c:				free(vm->players[i]->comment);
./src/free_vm.c:			if (vm->players[i]->code)
./src/free_vm.c:				free(vm->players[i]->code);
./src/free_vm.c:			free(vm->players[i]);
./src/free_vm.c:	cursor = vm->cursors;
./src/free_vm.c:	vm->cursors = NULL;
./src/ft_color_select.c:	if (vm->cursors != NULL)
./src/ft_color_select.c:		cursor = vm->cursors;
./src/ft_color_select.c:	if (vm->cur_name[pose] != vm->vis.cur_name[pose])
./src/ft_color_select.c:	playerno = vm->cur_name[pose];
./src/ft_drow.c:	master = vm->cur_name;
./src/ft_drow.c:	slave = vm->vis.cur_name;
./src/ft_drow.c:	if (vm->vis.col != col || vm->vis.row != row)
./src/ft_drow.c:                vm->vis.col = col;
./src/ft_drow.c:                vm->vis.row = row;
./src/ft_drow.c:			mvwprintw(stdscr, i, j, "%02X", vm->arena[k]);
./src/ft_drow.c:	col-=vm->vis.add;
./src/ft_drow.c:	row-=vm->vis.line;
./src/ft_drow.c:	napms(vm->vis.speed);
./src/ft_drow.c:	vm->vis.ctd = 0;
./src/ft_drow_staf.c:                vm->vis_fl = 0;
./src/ft_drow_staf.c:                vm->vis.speed = vm->vis.speed - 100;
./src/ft_drow_staf.c:        if (vm->vis.speed < 0)
./src/ft_drow_staf.c:                vm->vis.speed = 0;
./src/ft_drow_staf.c:                vm->vis.speed = vm->vis.speed + 100;
./src/ft_drow_staf.c:	mvwprintw(stdscr, 2, col + 2, "cycles_to_die = %i", vm->cycles_to_die);
./src/ft_drow_staf.c:        mvwprintw(stdscr, 3, col + 2, "cur_cycle = %i", vm->cur_cycle);
./src/ft_drow_staf.c:        if (vm->vis.speed == 0)
./src/ft_drow_staf.c:                mvwprintw(stdscr, row + 3, 2, "speed 1/%i fps", vm->vis.speed);
./src/ft_drow_staf.c:	col-=vm->vis.add;
./src/ft_drow_staf.c:        row-=vm->vis.line;
./src/ft_drow_staf.c:                        else if (i == 0 && j == col - 1 - vm->vis.add)
./src/ft_drow_staf.c:                        else if (i == row - 1 - vm->vis.line && j == col - 1 - vm->vis.add)
./src/ft_drow_staf.c:                        else if (i == row - 1 - vm->vis.line && j == 0)
./src/ft_drow_staf.c:                        else if (i == row - 1 - vm->vis.line && j == col - 1)
./src/ft_drow_staf.c:                        else if (i == 0 || i == row - 1 || i == row - 1 - vm->vis.line)
./src/ft_drow_staf.c:                        else if (j == col - 1 - vm->vis.add && i < row - 1 - vm->vis.line)
./src/ft_start_stop_drow.c:        master = vm->cur_name;
./src/ft_start_stop_drow.c:        slave = vm->vis.cur_name;
./src/ft_start_stop_drow.c:        vm->vis.row = row;
./src/ft_start_stop_drow.c:        vm->vis.col = col;
./src/ft_start_stop_drow.c:        vm->vis.ctd = 1;
./src/ft_start_stop_drow.c:        vm->vis.add = 25;
./src/ft_start_stop_drow.c:        vm->vis.line = 5;
./src/ft_start_stop_drow.c:        vm->vis.speed = 500;
./src/init_game.c:		cursor->op_code = vm->arena[cursor->pc];
./src/init_game.c:		if (vm->arena[cursor->pc] >= 0x01 && vm->arena[cursor->pc] <= 0x10)
./src/init_game.c:	if (!vm->cursors)
./src/init_game.c:		vm->cursors = cursor;
./src/init_game.c:		cursor->next = vm->cursors;
./src/init_game.c:		vm->cursors = cursor;
./src/init_game.c:	vm->cur_id++;
./src/init_game.c:	vm->cursors->id = vm->cur_id;
./src/init_game.c:	vm->cursors_num++;
./src/init_game.c:		if (vm->players[i])
./src/init_game.c:			add_cursor(vm->players[i], vm->players[i]->pc, vm);
./src/init_game.c:	vm->last_alive = vm->cursors->player;
./src/init_game.c:		if (vm->players[i])
./src/init_game.c:			ft_memcpy(&(vm->arena[pc]), vm->players[i]->code,
./src/init_game.c:				(vm->players[i]->code_size));
./src/init_game.c:			vm->players[i]->pc = pc;
./src/init_game.c:			fill_cor_name(vm->players[i]->code_size, pc, vm->players[i], vm);
./src/init_game.c:			pc += MEM_SIZE / vm->players_num;
./src/parser.c:		if (vm->players[i])
./src/parser.c:				vm->players[i]->color = CYAN;
./src/parser.c:				vm->players[i]->color = GREEN;
./src/parser.c:				vm->players[i]->color = WHITE;
./src/parser.c:				vm->players[i]->color = MAG;
./src/parser.c:		vm->dump_fl = num;
./src/parser.c:			vm->vis_fl = 1;
./src/parser.c:			vm->aff_fl = 1;
./src/parser.c:			vm->stat_fl = 1;
./src/parser.c:			vm->alive_fl = 1;
./src/parser.c:	if (vm->players_num > MAX_PLAYERS || vm->players_num == 0)
./src/player.c:	while (vm->players[i])
./src/player.c:	vm->players[i] = player;
./src/player.c:		if (!vm->players[id - 1])
./src/player.c:			vm->players[id - 1] = player;
./src/player.c:			tmp = vm->players[id - 1];
./src/player.c:			vm->players[id - 1] = player;
./src/player.c:	vm->players_num++;
./src/printing.c:		player = vm->players[i];
./src/printing.c:	vm->last_alive->id, vm->last_alive->name);
./src/utils1.c:	return (vm->arena[address_norming(pc + step)]);
./src/virtual_machine.c:			reg = vm->arena[cursor->pc + step];
./src/virtual_machine.c:		args_types_code = vm->arena[cursor->pc + 1];
./src/virtual_machine.c:	cursor = vm->cursors;
./src/virtual_machine.c:	if (vm->vis_fl == 1)
./src/virtual_machine.c:	while (vm->cursors_num)
./src/virtual_machine.c:		if (vm->dump_fl == vm->cur_cycle)
./src/virtual_machine.c:			print_dump(vm->arena, vm);
./src/virtual_machine.c:		if (vm->vis_fl == 1)
./src/virtual_machine.c:		cursor = vm->cursors;
./src/virtual_machine.c:		if ((size_t)vm->cycles_to_die == vm->cycles_after_check
./src/virtual_machine.c:			|| vm->cycles_to_die <= 0)
./src/virtual_machine.c:		vm->cur_cycle++;
./src/virtual_machine.c:		vm->cycles_after_check++;
